PRUEBA PARA EL EXPORT Y EL ENV:

int	main(int argc, char *argv[], char **envp)
{
	(void)argc;
	t_env	*env;
	char	str[20] = "PATH=\"prueba\"";

	env = ft_getenv(envp);
	printf("primer env:\n\n");
	ft_env(&env);
	printf("\n\n\nprimer export: con argumentos\n\n");
	ft_export(&env, argv[1]);
	printf("\n\n\nsegundo export: modificando una variable\n\n");
	ft_export(&env, str);
	printf("\n\n\ntercer export: con un NULL\n\n");
	ft_export(&env, NULL);
	printf("\n\n\nsegundo env:\n\n");
	ft_env(&env);
}

PRUEBA PARA EL CD:

int	main(int argc, char *argv[], char **envp)
{
	(void)argc;
	(void)argv;
	t_env	*env;

	env = ft_getenv(envp);
	ft_env(&env);
	ubic = (char *)malloc(_PC_PATH_MAX * sizeof(char *));
	if (!ubic)
		return (0);
	ubic = getcwd(ubic, sizeof(ubic));
	ft_cd(argv);
	ubic = getcwd(ubic, sizeof(ubic));
	free_list(&env);
}

PRUEBA PARA UNSET Y PWD:

int	main(int argc, char *argv[], char **envp)
{
	(void)argc;
	(void)argv;
	t_env	*env;

	env = ft_getenv(envp);
	printf("			primer env\n\n\n");
	ft_env(&env);
	printf("			primer export\n\n\n");
	ft_export(&env, argv[1]);
	printf("			segundo env\n\n\n");
	ft_env(&env);
	printf("			primer unset\n\n\n");
	ft_unset(&env, argv[2]);
	printf("			tercer env\n\n\n");
	ft_env(&env);
	ft_pwd();
	return (0);
}

PRUEBA PARA EL EXPANDER:

t_lists	*create_list_test(char *arg)
{
	t_lists	*node_test;

	node_test = malloc(sizeof(t_lists));
	if (!node_test)
		return (printf("fallo de asignacion de memoria\n"), NULL);
	printf("le mando %s\n", arg);
	node_test->content = ft_strdup(arg);
	node_test->path = NULL;
	node_test->token = NULL;
	node_test->next = NULL;
	return (node_test);
}

void	test_add_back(t_lists **list, t_lists *test_node)
{
	t_lists	*tmp;

	if (!(*list))
	{
		*list = test_node;
	}
	else
	{
		tmp = *list;
		while ((*list)->next)
			*list = (*list)->next;
		(*list)->next = test_node;
		*list = tmp;
	}
}

int	main(int argc, char *argv[], char **envp)
{
	(void)argc;
	t_env	*env;
	t_lists	*test;
	int		i;

	test = create_list_test(argv[1]);
	env = ft_getenv(envp);
	i = 2;
	while (argv[i] != NULL)
	{
		test_add_back(&test, create_list_test(argv[i]));
		i++;
	}
	ft_expander(&test, &env);
	while (test)
	{
		printf("test->content == %s\n", test->content);
		test = test->next;
	}
	// free_list(&env);
}

linea de comandos a probar: ./minishell \$USER \$OLDPWD "\"me encantaria volar con unicornios y \$USER y \$tumadre\"" "'\$USER no me deja hacer los deberes'"
linea de comandos a probar 2:  ./minishell \$USER \$OLDPWD "\"'me encantaria volar con unicornios y \$USER y \$tumadre'\"" "'\$USER no me deja hacer los deberes'"